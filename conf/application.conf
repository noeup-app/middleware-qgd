# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`


# DEFAULT DATABASE : BYP-DEV1 - bvr
pg.db               = "bvrgicxjphglirb"
pg.host             = "bvrgicxjphglirb-postgresql.services.clever-cloud.com"
pg.port             = "5432"
db.default.username = "utna9i4i4hveomqu91ya"
db.default.password = "gQ2o7ELC1WbYRdi2KZau"

// OVERRIDE WITH ENV. VARS
pg.db               = ${?QGD_PG_DB}
pg.host             = ${?QGD_PG_HOST}
pg.port             = ${?QGD_PG_PORT}
db.default.username = ${?QGD_PG_USERNAME}
db.default.password = ${?QGD_PG_PASSWORD}

db.default.url      = "jdbc:postgresql://"${pg.host}":"${pg.port}"/"${pg.db}
db.default.driver   = org.postgresql.Driver
db.default.username = ${?POSTGRESQL_ADDON_USER}
db.default.password = ${?POSTGRESQL_ADDON_PASSWORD}

db.default.logStatements=true

# In order to reduce lock contention and thus improve performance,
# each incoming connection request picks off a connection from a
# pool that has thread-affinity.
# The higher this number, the better your performance will be for the
# case when you have plenty of short-lived threads.
# Beyond a certain threshold, maintenance of these pools will start
# to have a negative effect on performance (and only for the case
# when connections on a partition start running out).
#db.default.partitionCount=2
db.default.partitionCount=1

# The number of connections to create per partition. Setting this to
# 5 with 3 partitions means you will have 15 unique connections to the
# database. Note that BoneCP will not create all these connections in
# one go but rather start off with minConnectionsPerPartition and
# gradually increase connections as required.
#db.default.maxConnectionsPerPartition=5
db.default.maxConnectionsPerPartition=1

# The number of initial connections, per partition.
#db.default.minConnectionsPerPartition=5
db.default.minConnectionsPerPartition=1

# When the available connections are about to run out, BoneCP will
# dynamically create new ones in batches. This property controls
# how many new connections to create in one go (up to a maximum of
# maxConnectionsPerPartition). Note: This is a per-partition setting.
db.default.acquireIncrement=1

# After attempting to acquire a connection and failing, try to
# connect this number of times before giving up.
db.default.acquireRetryAttempts=10

# How long to wait before attempting to obtain a
# connection again after a failure.
db.default.acquireRetryDelay=5 seconds

# The maximum time to wait before a call
# to getConnection is timed out.
db.default.connectionTimeout=1 second

# Idle max age
db.default.idleMaxAge=10 minute

# This sets the time for a connection to remain idle before sending a test query to the DB.
# This is useful to prevent a DB from timing out connections on its end.
db.default.idleConnectionTestPeriod=5 minutes

# An initial SQL statement that is run only when
# a connection is first created.
db.default.initSQL="SELECT 1"

# If enabled, log SQL statements being executed.
db.default.logStatements=false

# The maximum connection age.
db.default.maxConnectionAge=1 hour





# Slick database configuration
//slick.dbs.default.driver="slick.driver.H2Driver$"
//slick.dbs.default.db.driver="org.h2.Driver"
//slick.dbs.default.db.url="jdbc:h2:mem:play;MODE=PostgreSQL"

# Evolutions
# ~~~~~
# You can disable evolutions if needed
evolutionplugin=enabled


# Redis
# ~~~~~
redis.host=b8cvglxuz-redis.services.clever-cloud.com
redis.port=1307
redis.password=wAxzY7H5rKAa5B4iM3C
redis.database=0

redis.host=${?REDIS_HOST}
redis.port=${?REDIS_PORT}
redis.password=${?REDIS_PWD}
redis.database=${?REDIS_DATABASE}


# Registers the error handler
# ~~~~~
play.http.errorHandler = "qgd.errorHandle.ErrorHandler"

# Registers the request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the filters
# ~~~~~
play.http.filters = "qgd.utils.Filters"

# The application DI modules
# ~~~~~
play.modules.enabled += "qgd.authorizationClient.modules.SilhouetteModule"

# Security Filter Configuration - Content Security Policy
# ~~~~~
#play.filters.headers.contentSecurityPolicy
# default-src
# 'self'
# img-src
# 'self'
# fbcdn-profile-a.akamaihd.net (Facebook)
# *.twimg.com (Twitter)
# *.googleusercontent.com (Google)
# *.xingassets.com (Xing)
# vk.com (VK)
# *.yimg.com (Yahoo)
# secure.gravatar.com
# style-src
# 'self'
# 'unsafe-inline'
# cdnjs.cloudflare.com
# maxcdn.bootstrapcdn.com
# cdn.jsdelivr.net
# fonts.googleapis.com
# 'unsafe-inline' (in-line css found in bootstrap.min.js)
# font-src
# 'self'
# fonts.gstatic.com
# fonts.googleapis.com
# cdnjs.cloudflare.com
# script-src
# 'self'
# clef.io
# connect-src
# 'self'
# twitter.com
# *.xing.com
# frame-src
# clef.io
play.filters.headers.contentSecurityPolicy="default-src 'self'; img-src 'self' fbcdn-profile-a.akamaihd.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com; style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com; font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com; script-src 'self' clef.io; connect-src 'self' twitter.com *.xing.com; frame-src clef.io"

include "silhouette.conf"
